name: MT5 CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: windows-latest  # MT5编译需要Windows环境
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置工作目录
        run: |
          echo "设置工作目录"
          mkdir -p build
      
      - name: 下载并解压MT5
        run: |
          echo "开始下载MT5解压版本"
          # 下载预打包的MT5解压版本
          Invoke-WebRequest -Uri "http://yingcai.rgslb.link/MT5.zip" -OutFile "MT5.zip" -UseBasicParsing
          
          # 检查下载是否成功
          if (!(Test-Path "MT5.zip")) {
            echo "错误：MT5.zip下载失败"
            exit 1
          }
          
          # 显示下载文件信息
          $fileInfo = Get-Item "MT5.zip"
          echo "MT5.zip文件大小: $($fileInfo.Length / 1MB) MB"
          echo "MT5.zip下载时间: $($fileInfo.LastWriteTime)"
          
          # 检查文件大小是否合理（至少应该有几十MB）
          if ($fileInfo.Length -lt 10MB) {
            echo "警告：MT5.zip文件大小异常小，可能下载不完整"
          }
          
          # 创建解压目录
          New-Item -Path "MT5_Extract" -ItemType Directory -Force
          
          # 解压MT5
          echo "开始解压MT5"
          try {
            Expand-Archive -Path "MT5.zip" -DestinationPath "MT5_Extract" -Force
            echo "解压完成，检查解压结果"
          }
          catch {
            echo "解压过程出错: $_"
            exit 1
          }
          
          # 列出解压后的目录内容
          echo "解压目录内容:"
          Get-ChildItem -Path "MT5_Extract" -Recurse -Depth 1 | Select-Object FullName
          
          # 查找terminal64.exe文件
          $terminalExe = Get-ChildItem -Path "MT5_Extract" -Filter "terminal64.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          
          if ($terminalExe) {
            echo "找到terminal64.exe: $($terminalExe.FullName)"
            $MT5_DIR = $terminalExe.Directory.FullName
            echo "使用MT5目录: $MT5_DIR"
            
            # 创建MT5目录并复制文件
            New-Item -Path "MT5" -ItemType Directory -Force
            Copy-Item -Path "$MT5_DIR\*" -Destination "MT5\" -Recurse -Force
            
            echo "MT5目录内容:"
            Get-ChildItem -Path "MT5" | Select-Object Name, Length | Format-Table
          } else {
            echo "在解压目录中未找到terminal64.exe"
            
            # 尝试查找metaeditor64.exe
            $metaEditor = Get-ChildItem -Path "MT5_Extract" -Filter "metaeditor64.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
            
            if ($metaEditor) {
              echo "找到metaeditor64.exe: $($metaEditor.FullName)"
              $MT5_DIR = $metaEditor.Directory.FullName
              echo "使用包含MetaEditor的目录: $MT5_DIR"
              
              # 创建MT5目录并复制文件
              New-Item -Path "MT5" -ItemType Directory -Force
              Copy-Item -Path "$MT5_DIR\*" -Destination "MT5\" -Recurse -Force
              
              echo "MT5目录内容:"
              Get-ChildItem -Path "MT5" | Select-Object Name, Length | Format-Table
            } else {
              echo "在解压目录中也未找到metaeditor64.exe，无法继续"
              exit 1
            }
          }
      
      - name: 编译MT5项目
        run: |
          echo "开始编译MT5项目"
          
          # 设置MT5路径
          $MT5_PATH = "$pwd\MT5"
          
          # 查找MetaEditor
          $metaEditorPath = Get-ChildItem -Path $MT5_PATH -Filter "metaeditor64.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
          
          if (!$metaEditorPath) {
            echo "错误：未找到MetaEditor"
            echo "MT5目录内容:"
            Get-ChildItem -Path $MT5_PATH -Recurse -Depth 2 | Select-Object FullName
            exit 1
          }
          
          $METAEDITOR_PATH = $metaEditorPath
          echo "MetaEditor路径: $METAEDITOR_PATH"
          
          # 创建编译脚本
          @"
          #property show_inputs
          int start()
          {
             string path = GetPathName();
             string compile_file = path + "\\PositionMonitor.mq5";
             int result = Compile(compile_file);
             if(result == 0)
                Print("Compilation successful");
             else
                Print("Compilation failed with error: ", result);
             return(result);
          }
          "@ | Out-File -FilePath "compile.mq5" -Encoding ASCII
          
          # 显示当前目录内容
          echo "当前目录内容:"
          Get-ChildItem | Select-Object Name, Length | Format-Table
          
          # 检查源文件是否存在
          if (!(Test-Path "PositionMonitor.mq5")) {
            echo "错误：未找到源文件 PositionMonitor.mq5"
            exit 1
          }
          
          # 使用MetaEditor编译项目
          echo "执行编译命令"
          & "$METAEDITOR_PATH" /compile:"compile.mq5" /log:"compile_log.txt" /inc:"$pwd"
          
          # 等待编译完成
          Start-Sleep -Seconds 10
          
          # 检查编译日志是否存在
          if (!(Test-Path "compile_log.txt")) {
            echo "警告：未找到编译日志文件"
            # 尝试查找编译结果
            $ex5Files = Get-ChildItem -Path "." -Filter "*.ex5"
            if ($ex5Files.Count -gt 0) {
              echo "找到编译后的文件:"
              $ex5Files | Select-Object Name, Length | Format-Table
            } else {
              echo "未找到编译后的文件"
              exit 1
            }
          } else {
            # 检查编译结果
            $log = Get-Content -Path "compile_log.txt" -ErrorAction SilentlyContinue
            echo "编译日志内容:"
            echo $log
            
            if ($log -match "Compilation successful" -or (Get-ChildItem -Path "." -Filter "*.ex5").Count -gt 0) {
              echo "编译成功"
              # 复制编译后的文件到build目录
              Copy-Item -Path "*.ex5" -Destination "build\" -ErrorAction SilentlyContinue
              echo "build目录内容:"
              Get-ChildItem -Path "build" | Select-Object Name, Length | Format-Table
            } else {
              echo "编译失败，日志内容:"
              Get-Content -Path "compile_log.txt"
              exit 1
            }
          }
      
      - name: 打包编译结果
        run: |
          echo "打包编译结果"
          # 检查build目录是否有文件
          $buildFiles = Get-ChildItem -Path "build" -ErrorAction SilentlyContinue
          if ($buildFiles.Count -eq 0) {
            echo "警告：build目录为空，尝试查找项目根目录中的ex5文件"
            $ex5Files = Get-ChildItem -Path "." -Filter "*.ex5" -ErrorAction SilentlyContinue
            if ($ex5Files.Count -gt 0) {
              echo "找到ex5文件，复制到build目录"
              Copy-Item -Path "*.ex5" -Destination "build\" -ErrorAction SilentlyContinue
            } else {
              echo "错误：未找到任何ex5文件"
              exit 1
            }
          }
          
          # 再次检查build目录
          $buildFiles = Get-ChildItem -Path "build" -ErrorAction SilentlyContinue
          if ($buildFiles.Count -eq 0) {
            echo "错误：build目录仍为空，无法打包"
            exit 1
          }
          
          # 打包文件
          Compress-Archive -Path "build\*" -DestinationPath "mt5-build.zip" -Force
          echo "打包完成: mt5-build.zip"
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: mt5-artifacts
          path: mt5-build.zip
      
      - name: 配置SSH密钥
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.ALIYUN_SSH_PRIVATE_KEY }}
      
      - name: 部署到Windows服务器
        env:
          WINDOWS_HOST: ${{ secrets.WINDOWS_HOST }}
          WINDOWS_USERNAME: ${{ secrets.WINDOWS_USERNAME }}
          WINDOWS_PASSWORD: ${{ secrets.WINDOWS_PASSWORD }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
        run: |
          # 使用WinRM或其他Windows远程管理工具
          # 安装WinRM客户端
          pip install pywinrm
          
          # 创建Python部署脚本
          @"
          import winrm
          import os
          import base64
          
          # 连接到Windows服务器
          session = winrm.Session('$env:WINDOWS_HOST', auth=('$env:WINDOWS_USERNAME', '$env:WINDOWS_PASSWORD'))
          
          # 创建部署目录
          session.run_ps('New-Item -Path "$env:DEPLOY_PATH" -ItemType Directory -Force')
          
          # 将文件转换为Base64
          with open('mt5-build.zip', 'rb') as f:
              file_data = base64.b64encode(f.read()).decode('utf-8')
          
          # 上传文件
          script = f'''
          $base64Data = "{file_data}"
          $bytes = [Convert]::FromBase64String($base64Data)
          [IO.File]::WriteAllBytes("$env:DEPLOY_PATH\\mt5-build.zip", $bytes)
          '''
          session.run_ps(script)
          
          # 执行部署脚本
          deploy_script = '''
          # 解压文件
          Expand-Archive -Path "$env:DEPLOY_PATH\\mt5-build.zip" -DestinationPath "$env:DEPLOY_PATH" -Force
          
          # 启动MT5
          Start-Process -FilePath "$env:DEPLOY_PATH\\terminal64.exe" -ArgumentList "/portable"
          
          Write-Output "部署完成"
          '''
          result = session.run_ps(deploy_script)
          print(result.std_out.decode())
          "@ | Out-File -FilePath "deploy.py" -Encoding UTF8
          
          # 执行部署脚本
          python deploy.py 