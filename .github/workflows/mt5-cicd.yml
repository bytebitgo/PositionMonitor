name: MT5 CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'  # 只在推送标签时触发，标签格式为v开头，如v1.0.0

permissions:
  contents: write  # 明确授予写入仓库内容的权限

jobs:
  build:
    runs-on: windows-latest  # MT5编译需要Windows环境
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        
      - name: 设置工作目录
        run: |
          echo "设置工作目录"
          mkdir -p build
      
      - name: 下载并解压MT5
        run: |
          echo "开始下载MT5解压版本"
          # 下载预打包的MT5解压版本
          Invoke-WebRequest -Uri "http://yingcai.rgslb.link/MT5.zip" -OutFile "MT5.zip" -UseBasicParsing
          
          # 检查下载是否成功
          if (!(Test-Path "MT5.zip")) {
            echo "错误：MT5.zip下载失败"
            exit 1
          }
          
          # 显示下载文件信息
          $fileInfo = Get-Item "MT5.zip"
          echo "MT5.zip文件大小: $($fileInfo.Length / 1MB) MB"
          echo "MT5.zip下载时间: $($fileInfo.LastWriteTime)"
          
          # 检查文件大小是否合理（至少应该有几十MB）
          if ($fileInfo.Length -lt 10MB) {
            echo "警告：MT5.zip文件大小异常小，可能下载不完整"
          }
          
          # 创建解压目录
          New-Item -Path "MT5_Extract" -ItemType Directory -Force
          
          # 解压MT5
          echo "开始解压MT5"
          try {
            Expand-Archive -Path "MT5.zip" -DestinationPath "MT5_Extract" -Force
            echo "解压完成，检查解压结果"
          }
          catch {
            echo "解压过程出错: $_"
            exit 1
          }
          
          # 列出解压后的目录内容
          echo "解压目录内容:"
          Get-ChildItem -Path "MT5_Extract" -Recurse -Depth 1 | Select-Object FullName
          
          # 查找terminal64.exe文件
          $terminalExe = Get-ChildItem -Path "MT5_Extract" -Filter "terminal64.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
          
          if ($terminalExe) {
            echo "找到terminal64.exe: $($terminalExe.FullName)"
            $MT5_DIR = $terminalExe.Directory.FullName
            echo "使用MT5目录: $MT5_DIR"
            
            # 创建MT5目录并复制文件
            New-Item -Path "MT5" -ItemType Directory -Force
            Copy-Item -Path "$MT5_DIR\*" -Destination "MT5\" -Recurse -Force
            
            # 创建portable.dat文件以启用便携模式
            echo "创建portable.dat文件以启用便携模式"
            New-Item -Path "MT5\portable.dat" -ItemType File -Force
            
            echo "MT5目录内容:"
            Get-ChildItem -Path "MT5" | Select-Object Name, Length | Format-Table
          } else {
            echo "在解压目录中未找到terminal64.exe"
            
            # 尝试查找metaeditor64.exe
            $metaEditor = Get-ChildItem -Path "MT5_Extract" -Filter "metaeditor64.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
            
            if ($metaEditor) {
              echo "找到metaeditor64.exe: $($metaEditor.FullName)"
              $MT5_DIR = $metaEditor.Directory.FullName
              echo "使用包含MetaEditor的目录: $MT5_DIR"
              
              # 创建MT5目录并复制文件
              New-Item -Path "MT5" -ItemType Directory -Force
              Copy-Item -Path "$MT5_DIR\*" -Destination "MT5\" -Recurse -Force
              
              # 创建portable.dat文件以启用便携模式
              echo "创建portable.dat文件以启用便携模式"
              New-Item -Path "MT5\portable.dat" -ItemType File -Force
              
              echo "MT5目录内容:"
              Get-ChildItem -Path "MT5" | Select-Object Name, Length | Format-Table
            } else {
              echo "在解压目录中也未找到metaeditor64.exe，无法继续"
              exit 1
            }
          }
      
      - name: 启动MT5组件（便携模式）
        run: |
          echo "以便携模式启动MT5组件"
          
          # 设置MT5路径
          $MT5_PATH = "$pwd\MT5"
          
          # 启动terminal64.exe（如果存在）
          $terminalPath = Get-ChildItem -Path $MT5_PATH -Filter "terminal64.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
          if ($terminalPath) {
            echo "启动terminal64.exe（便携模式）"
            Start-Process -FilePath $terminalPath -ArgumentList "/portable" -WindowStyle Minimized
            echo "等待terminal64.exe初始化..."
            Start-Sleep -Seconds 30
            
            # 检查是否成功启动
            $terminalProcess = Get-Process -Name "terminal64" -ErrorAction SilentlyContinue
            if ($terminalProcess) {
              echo "terminal64.exe已成功启动"
            } else {
              echo "警告：terminal64.exe可能未成功启动"
            }
          } else {
            echo "未找到terminal64.exe，跳过启动"
          }
          
          # 查找并启动metaeditor64.exe
          $metaEditorPath = Get-ChildItem -Path $MT5_PATH -Filter "metaeditor64.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
          if ($metaEditorPath) {
            echo "启动metaeditor64.exe（便携模式）"
            Start-Process -FilePath $metaEditorPath -ArgumentList "/portable" -WindowStyle Minimized
            echo "等待metaeditor64.exe初始化..."
            Start-Sleep -Seconds 20
            
            # 检查是否成功启动
            $metaEditorProcess = Get-Process -Name "metaeditor64" -ErrorAction SilentlyContinue
            if ($metaEditorProcess) {
              echo "metaeditor64.exe已成功启动"
            } else {
              echo "警告：metaeditor64.exe可能未成功启动"
            }
          } else {
            echo "错误：未找到metaeditor64.exe，无法继续"
            exit 1
          }
      
      - name: 编译MT5项目
        run: |
          echo "开始编译MT5项目"
          
          # 设置MT5路径
          $MT5_PATH = "$pwd\MT5"
          
          # 查找MetaEditor
          $metaEditorPath = Get-ChildItem -Path $MT5_PATH -Filter "metaeditor64.exe" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
          
          if (!$metaEditorPath) {
            echo "错误：未找到MetaEditor"
            echo "MT5目录内容:"
            Get-ChildItem -Path $MT5_PATH -Recurse -Depth 2 | Select-Object FullName
            exit 1
          }
          
          $METAEDITOR_PATH = $metaEditorPath
          echo "MetaEditor路径: $METAEDITOR_PATH"
          
          # 显示当前目录内容
          echo "当前目录内容:"
          Get-ChildItem | Select-Object Name, Length | Format-Table
          
          # 获取项目根目录和MQ5文件的完整路径
          $PROJECT_ROOT = "$pwd"
          $MQ5_FILE_PATH = "$PROJECT_ROOT\PositionMonitor.mq5"
          $LOG_FILE_PATH = "$PROJECT_ROOT\compile.log"
          
          # 检查源文件是否存在
          if (!(Test-Path $MQ5_FILE_PATH)) {
            echo "错误：未找到源文件 $MQ5_FILE_PATH"
            exit 1
          }
          
          # 关闭之前启动的MetaEditor进程（如果存在）
          $metaEditorProcess = Get-Process -Name "metaeditor64" -ErrorAction SilentlyContinue
          if ($metaEditorProcess) {
            echo "关闭之前启动的MetaEditor进程"
            Stop-Process -Name "metaeditor64" -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 2
          }
          
          # 使用MetaEditor编译项目（使用新的命令格式）
          echo "执行编译命令"
          echo "编译文件: $MQ5_FILE_PATH"
          echo "日志文件: $LOG_FILE_PATH"
          echo "包含目录: $PROJECT_ROOT"
          
          & "$METAEDITOR_PATH" /portable /compile:"$MQ5_FILE_PATH" /log:"$LOG_FILE_PATH" /include:"$PROJECT_ROOT"
          
          # 等待编译完成
          Start-Sleep -Seconds 10
          
          # 检查编译日志是否存在
          if (!(Test-Path $LOG_FILE_PATH)) {
            echo "警告：未找到编译日志文件 $LOG_FILE_PATH"
            # 尝试查找编译结果
            $ex5Files = Get-ChildItem -Path "." -Filter "*.ex5"
            if ($ex5Files.Count -gt 0) {
              echo "找到编译后的文件:"
              $ex5Files | Select-Object Name, Length | Format-Table
            } else {
              echo "未找到编译后的文件"
              exit 1
            }
          } else {
            # 检查编译结果
            $log = Get-Content -Path $LOG_FILE_PATH -ErrorAction SilentlyContinue
            echo "编译日志内容:"
            echo $log
            
            if ($log -match "successfully compiled" -or $log -match "编译成功" -or (Get-ChildItem -Path "." -Filter "*.ex5").Count -gt 0) {
              echo "编译成功"
              # 复制编译后的文件到build目录
              Copy-Item -Path "*.ex5" -Destination "build\" -ErrorAction SilentlyContinue
              echo "build目录内容:"
              Get-ChildItem -Path "build" | Select-Object Name, Length | Format-Table
            } else {
              echo "编译失败，日志内容:"
              Get-Content -Path $LOG_FILE_PATH
              exit 1
            }
          }
          
          # 关闭所有MT5相关进程
          echo "关闭所有MT5相关进程"
          Stop-Process -Name "terminal64" -Force -ErrorAction SilentlyContinue
          Stop-Process -Name "metaeditor64" -Force -ErrorAction SilentlyContinue
      
      - name: 打包编译结果
        run: |
          echo "打包编译结果"
          # 检查build目录是否有文件
          $buildFiles = Get-ChildItem -Path "build" -ErrorAction SilentlyContinue
          if ($buildFiles.Count -eq 0) {
            echo "警告：build目录为空，尝试查找项目根目录中的ex5文件"
            $ex5Files = Get-ChildItem -Path "." -Filter "*.ex5" -ErrorAction SilentlyContinue
            if ($ex5Files.Count -gt 0) {
              echo "找到ex5文件，复制到build目录"
              Copy-Item -Path "*.ex5" -Destination "build\" -ErrorAction SilentlyContinue
            } else {
              echo "错误：未找到任何ex5文件"
              exit 1
            }
          }
          
          # 再次检查build目录
          $buildFiles = Get-ChildItem -Path "build" -ErrorAction SilentlyContinue
          if ($buildFiles.Count -eq 0) {
            echo "错误：build目录仍为空，无法打包"
            exit 1
          }
          
          # 打包文件
          Compress-Archive -Path "build\*" -DestinationPath "mt5-build.zip" -Force
          echo "打包完成: mt5-build.zip"
      
      - name: 获取标签版本
        id: get_version
        run: |
          $TAG_NAME = "${{ github.ref_name }}"
          echo "VERSION=$TAG_NAME" >> $env:GITHUB_OUTPUT
          echo "标签版本: $TAG_NAME"
      
      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            mt5-build.zip
            build/*.ex5
          
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: mt5-artifacts
          path: mt5-build.zip 